name: CI/CD pipeline

# Updated PYTHONPATH for integration tests


on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      python-version: "3.13"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        id: set-python
        with:
          python-version: "3.13"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests (verbose)
        run: pytest tests/ -v
        env:
          PYTHONPATH: ${{ github.workspace }}

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests with coverage
        run: pytest tests/ --cov=src --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}
      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  lint:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - run: |
          python -m pip install --upgrade pip
          pip install pylint
      - run: pylint src/ --output-format=text > lint_report.txt || true
      - uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint_report.txt

  format:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - run: |
          python -m pip install --upgrade pip
          pip install black
      - run: black src/ tests/ --check
      - run: black src/ tests/ --diff || true

  security:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - run: |
          python -m pip install --upgrade pip
          pip install bandit
      - run: bandit -r src/ -v || true
      - run: bandit -r src/ -f json -o security_report.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security_report.json
